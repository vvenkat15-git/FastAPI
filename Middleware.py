'''Middleware in fastapi is function that runs before and after every request.
   it is placed between the request made by the client and the repsonce generated by the server.
    Middleware allows us to process requests globally, such as for logging, authetication modyfing requst/responce objects, and handling errors etc/ '''


#How Middleware works in Fastapi
"when a client makes a request"
'1. The request is passed thorugh the middleware(from top to bottom).'
'2. The Main logic of the application is executed(handling routes, controllers, etc.)'
'3. The responce passes back thorugh the middleware'

#middleware function can perform actions like
'''1. modifying the request before it reches to the route handler.
   2. Modifying the responce before sending it back to the client
   3. Handling global logging, performance metrics authentication. etc.'
   '''

#structure of Middleware in Fastapi
'''Middleware in Fastapi implemented using the BaseHTTPMiddlware class from the starlette'''

#Example on middleware

from fastapi import FastAPI, Request
from starlette.middleware.base import BaseHTTPMiddleware
import time

app = FastAPI()

#custom middle to log request processing time

class LogProcessingTimeMiddleware(BaseHTTPMiddleware):
    async def dispath(self, request: Request, call_next):
        start_time = time.time()
        responce = await call_next(request)  # call the next process in the chain (route handlier)
        process_time = time.time() - start_time
        print(f"Request: {request.method} {request.url} processed in the {process_time} seconds")
        return responce  #Return the responce after processing
    

#adding the middleware to the FastAPI app

app.add_middleware(LogProcessingTimeMiddleware)


@app.get("/items/")
async def read_items():
    return {"message":"This is a test endpoint"}
